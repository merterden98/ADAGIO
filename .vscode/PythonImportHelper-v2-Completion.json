[
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "dataclasses",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dataclasses",
        "description": "dataclasses",
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "to_dict_of_lists",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "to_dict_of_lists",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractproperty",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractproperty",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractproperty",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractproperty",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "Gene",
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "isExtraImport": true,
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Gene",
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "isExtraImport": true,
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Gene",
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "isExtraImport": true,
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Gene",
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "isExtraImport": true,
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Gene",
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "isExtraImport": true,
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Gene",
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "isExtraImport": true,
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Gene",
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "isExtraImport": true,
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Gene",
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "isExtraImport": true,
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Gene",
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "isExtraImport": true,
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Gene",
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "isExtraImport": true,
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Gene",
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "isExtraImport": true,
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Gene",
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "isExtraImport": true,
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Description",
        "importPath": "t_map.feta.description",
        "description": "t_map.feta.description",
        "isExtraImport": true,
        "detail": "t_map.feta.description",
        "documentation": {}
    },
    {
        "label": "Description",
        "importPath": "t_map.feta.description",
        "description": "t_map.feta.description",
        "isExtraImport": true,
        "detail": "t_map.feta.description",
        "documentation": {}
    },
    {
        "label": "Description",
        "importPath": "t_map.feta.description",
        "description": "t_map.feta.description",
        "isExtraImport": true,
        "detail": "t_map.feta.description",
        "documentation": {}
    },
    {
        "label": "Description",
        "importPath": "t_map.feta.description",
        "description": "t_map.feta.description",
        "isExtraImport": true,
        "detail": "t_map.feta.description",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Feta",
        "importPath": "t_map.feta.feta",
        "description": "t_map.feta.feta",
        "isExtraImport": true,
        "detail": "t_map.feta.feta",
        "documentation": {}
    },
    {
        "label": "PreComputeFeta",
        "importPath": "t_map.feta.feta",
        "description": "t_map.feta.feta",
        "isExtraImport": true,
        "detail": "t_map.feta.feta",
        "documentation": {}
    },
    {
        "label": "Feta",
        "importPath": "t_map.feta.feta",
        "description": "t_map.feta.feta",
        "isExtraImport": true,
        "detail": "t_map.feta.feta",
        "documentation": {}
    },
    {
        "label": "PreComputeFeta",
        "importPath": "t_map.feta.feta",
        "description": "t_map.feta.feta",
        "isExtraImport": true,
        "detail": "t_map.feta.feta",
        "documentation": {}
    },
    {
        "label": "Garbanzo",
        "importPath": "t_map.garbanzo.garbanzo",
        "description": "t_map.garbanzo.garbanzo",
        "isExtraImport": true,
        "detail": "t_map.garbanzo.garbanzo",
        "documentation": {}
    },
    {
        "label": "Garbanzo",
        "importPath": "t_map.garbanzo.garbanzo",
        "description": "t_map.garbanzo.garbanzo",
        "isExtraImport": true,
        "detail": "t_map.garbanzo.garbanzo",
        "documentation": {}
    },
    {
        "label": "Garbanzo",
        "importPath": "t_map.garbanzo.garbanzo",
        "description": "t_map.garbanzo.garbanzo",
        "isExtraImport": true,
        "detail": "t_map.garbanzo.garbanzo",
        "documentation": {}
    },
    {
        "label": "Garbanzo",
        "importPath": "t_map.garbanzo.garbanzo",
        "description": "t_map.garbanzo.garbanzo",
        "isExtraImport": true,
        "detail": "t_map.garbanzo.garbanzo",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "EdgeListGarbanzo",
        "importPath": "t_map.garbanzo.edgelist",
        "description": "t_map.garbanzo.edgelist",
        "isExtraImport": true,
        "detail": "t_map.garbanzo.edgelist",
        "documentation": {}
    },
    {
        "label": "EdgeListGarbanzo",
        "importPath": "t_map.garbanzo.edgelist",
        "description": "t_map.garbanzo.edgelist",
        "isExtraImport": true,
        "detail": "t_map.garbanzo.edgelist",
        "documentation": {}
    },
    {
        "label": "EdgeListGarbanzo",
        "importPath": "t_map.garbanzo.edgelist",
        "description": "t_map.garbanzo.edgelist",
        "isExtraImport": true,
        "detail": "t_map.garbanzo.edgelist",
        "documentation": {}
    },
    {
        "label": "EdgeListGarbanzo",
        "importPath": "t_map.garbanzo.edgelist",
        "description": "t_map.garbanzo.edgelist",
        "isExtraImport": true,
        "detail": "t_map.garbanzo.edgelist",
        "documentation": {}
    },
    {
        "label": "EdgeListGarbanzo",
        "importPath": "t_map.garbanzo.edgelist",
        "description": "t_map.garbanzo.edgelist",
        "isExtraImport": true,
        "detail": "t_map.garbanzo.edgelist",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "HummusScore",
        "importPath": "t_map.hummus.hummus_score",
        "description": "t_map.hummus.hummus_score",
        "isExtraImport": true,
        "detail": "t_map.hummus.hummus_score",
        "documentation": {}
    },
    {
        "label": "ScoreFn",
        "importPath": "t_map.hummus.hummus_score",
        "description": "t_map.hummus.hummus_score",
        "isExtraImport": true,
        "detail": "t_map.hummus.hummus_score",
        "documentation": {}
    },
    {
        "label": "HummusScore",
        "importPath": "t_map.hummus.hummus_score",
        "description": "t_map.hummus.hummus_score",
        "isExtraImport": true,
        "detail": "t_map.hummus.hummus_score",
        "documentation": {}
    },
    {
        "label": "ScoreFn",
        "importPath": "t_map.hummus.hummus_score",
        "description": "t_map.hummus.hummus_score",
        "isExtraImport": true,
        "detail": "t_map.hummus.hummus_score",
        "documentation": {}
    },
    {
        "label": "HummusScore",
        "importPath": "t_map.hummus.hummus_score",
        "description": "t_map.hummus.hummus_score",
        "isExtraImport": true,
        "detail": "t_map.hummus.hummus_score",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "KFold",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "KFold",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "t_map",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "t_map",
        "description": "t_map",
        "detail": "t_map",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "PreComputeRWR",
        "importPath": "t_map.feta.randomwalk",
        "description": "t_map.feta.randomwalk",
        "isExtraImport": true,
        "detail": "t_map.feta.randomwalk",
        "documentation": {}
    },
    {
        "label": "RandomWalkWithRestart",
        "importPath": "t_map.feta.randomwalk",
        "description": "t_map.feta.randomwalk",
        "isExtraImport": true,
        "detail": "t_map.feta.randomwalk",
        "documentation": {}
    },
    {
        "label": "Huri",
        "importPath": "t_map.garbanzo.huri",
        "description": "t_map.garbanzo.huri",
        "isExtraImport": true,
        "detail": "t_map.garbanzo.huri",
        "documentation": {}
    },
    {
        "label": "Hummus",
        "importPath": "t_map.hummus.hummus",
        "description": "t_map.hummus.hummus",
        "isExtraImport": true,
        "detail": "t_map.hummus.hummus",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Description",
        "kind": 6,
        "importPath": "build.lib.t_map.feta.description",
        "description": "build.lib.t_map.feta.description",
        "peekOfCode": "class Description:\n    requires_training: bool\n    training_opts: Any  # Hummus should know about TrainingOptions\n    hyper_params: Dict[str, Any]",
        "detail": "build.lib.t_map.feta.description",
        "documentation": {}
    },
    {
        "label": "Feta",
        "kind": 6,
        "importPath": "build.lib.t_map.feta.feta",
        "description": "build.lib.t_map.feta.feta",
        "peekOfCode": "class Feta(ABC):\n    @abstractproperty\n    def description(self) -> Description:\n        ...\n    @abstractmethod\n    def prioritize(self, disease_gene: List[Gene],\n                   graph: Union[nx.Graph, None]) -> Set[Tuple[Gene, float]]:\n        # In theory a model need not store the Graph and thus should rely on the Data library to pass it.\n        ...\n    def __call__(self, disease_gene: Union[Gene, List[Gene]],",
        "detail": "build.lib.t_map.feta.feta",
        "documentation": {}
    },
    {
        "label": "PreComputeFeta",
        "kind": 6,
        "importPath": "build.lib.t_map.feta.feta",
        "description": "build.lib.t_map.feta.feta",
        "peekOfCode": "class PreComputeFeta(Feta):\n    @abstractmethod\n    def setup(self, graph: nx.Graph, *args, **kwargs):\n        ...",
        "detail": "build.lib.t_map.feta.feta",
        "documentation": {}
    },
    {
        "label": "RandomWalkWithRestart",
        "kind": 6,
        "importPath": "build.lib.t_map.feta.randomwalk",
        "description": "build.lib.t_map.feta.randomwalk",
        "peekOfCode": "class RandomWalkWithRestart(Feta):\n    def __init__(self, alpha=0.85):\n        self._desc = Description(\n            requires_training=False,\n            training_opts=None,\n            hyper_params={\"alpha\": alpha})\n    def description(self) -> Description:\n        return self.__desc\n    def prioritize(self, disease_gene: List[Gene],\n                   graph: Union[nx.Graph, None]) -> Set[Tuple[Gene, float]]:",
        "detail": "build.lib.t_map.feta.randomwalk",
        "documentation": {}
    },
    {
        "label": "PreComputeRWR",
        "kind": 6,
        "importPath": "build.lib.t_map.feta.randomwalk",
        "description": "build.lib.t_map.feta.randomwalk",
        "peekOfCode": "class PreComputeRWR(PreComputeFeta):\n    def __init__(self, alpha=0.85):\n        self.__desc = Description(\n            requires_training=False,\n            training_opts=None,\n            hyper_params={\"alpha\": alpha})\n    def description(self) -> Description:\n        return self.__desc\n    def prioritize(self, disease_gene: List[Gene],\n                   graph: Union[nx.Graph, None]) -> Set[Tuple[Gene, float]]:",
        "detail": "build.lib.t_map.feta.randomwalk",
        "documentation": {}
    },
    {
        "label": "EdgeListGarbanzo",
        "kind": 6,
        "importPath": "build.lib.t_map.garbanzo.edgelist",
        "description": "build.lib.t_map.garbanzo.edgelist",
        "peekOfCode": "class EdgeListGarbanzo(Garbanzo):\n    def __init__(self, graph_path: str, gene_path: str):\n        self._graph_path = graph_path\n        self._gene_path = gene_path\n        self._graph = self._read_graph_from_path(graph_path)\n        self._genes = self._read_genes_from_path(gene_path)\n    @property\n    def graph(self) -> nx.Graph:\n        return self._graph\n    @property",
        "detail": "build.lib.t_map.garbanzo.edgelist",
        "documentation": {}
    },
    {
        "label": "Garbanzo",
        "kind": 6,
        "importPath": "build.lib.t_map.garbanzo.garbanzo",
        "description": "build.lib.t_map.garbanzo.garbanzo",
        "peekOfCode": "class Garbanzo(ABC):\n    @abstractproperty\n    def graph(self) -> nx.Graph:\n        ...\n    @abstractproperty\n    def graph_path(self) -> str:\n        ...\n    @abstractproperty\n    def gene_path(self) -> str:\n        ...",
        "detail": "build.lib.t_map.garbanzo.garbanzo",
        "documentation": {}
    },
    {
        "label": "Huri",
        "kind": 6,
        "importPath": "build.lib.t_map.garbanzo.huri",
        "description": "build.lib.t_map.garbanzo.huri",
        "peekOfCode": "class Huri(EdgeListGarbanzo):\n    HURI_URL = \"https://bcb.cs.tufts.edu/huri/huri.tsv\"\n    def __init__(self, gene_path: str, download_path: str = \"/tmp/\"):\n        self._gene_path = gene_path\n        self._graph_pathlib: pathlib.Path = pathlib.Path(\n            download_path) / \"huri\"\n        self._graph = self._download_and_parse_graph()\n        self._genes = self._read_genes_from_path(gene_path)\n    @property\n    def graph_path(self) -> str:",
        "detail": "build.lib.t_map.garbanzo.huri",
        "documentation": {}
    },
    {
        "label": "Gene",
        "kind": 6,
        "importPath": "build.lib.t_map.gene.gene",
        "description": "build.lib.t_map.gene.gene",
        "peekOfCode": "class Gene:\n    name: str\n    labels: Union[List[str], None] = None",
        "detail": "build.lib.t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Hummus",
        "kind": 6,
        "importPath": "build.lib.t_map.hummus.hummus",
        "description": "build.lib.t_map.hummus.hummus",
        "peekOfCode": "class Hummus:\n    def __init__(self, data: Garbanzo,\n                 with_scoring: Optional[HummusScore] = None,\n                 train_test_split_ratio: Optional[float] = None):\n        self.data = data\n        self._genes = [self.data.get(i) for i in range(len(data))]\n        self._score_module = with_scoring\n        self._with_cv = False\n        self._train_test_split_ratio = train_test_split_ratio\n    def with_cv(self, k_fold: Union[int, Literal[\"LOO\"]] = 5) -> Hummus:",
        "detail": "build.lib.t_map.hummus.hummus",
        "documentation": {}
    },
    {
        "label": "HummusTester",
        "kind": 6,
        "importPath": "build.lib.t_map.hummus.hummus",
        "description": "build.lib.t_map.hummus.hummus",
        "peekOfCode": "class HummusTester(ContextManager):\n    def __init__(self, data: Garbanzo, test_idx: List[int],\n                 with_scoring: Union[None,\n                                     HummusScore] = None):\n        self._data: Garbanzo = data\n        self._test: List[int] = test_idx\n        self._i = 0\n        self._heldout_genes = self._collect_heldout_genes()\n        self._with_scoring = with_scoring\n        if self._with_scoring is not None:",
        "detail": "build.lib.t_map.hummus.hummus",
        "documentation": {}
    },
    {
        "label": "HummusTrainer",
        "kind": 6,
        "importPath": "build.lib.t_map.hummus.hummus",
        "description": "build.lib.t_map.hummus.hummus",
        "peekOfCode": "class HummusTrainer(ContextManager):\n    \"\"\"\n        Ideally I expect this to be a training class, but\n        after much thought I am a bit puzzled as to how to\n        best structure this.\n    \"\"\"\n    def __init__(self, data: Garbanzo, train_idx: List[int],\n                 with_scoring: Union[None,\n                                     HummusScore] = None):\n        self._data: Garbanzo = data",
        "detail": "build.lib.t_map.hummus.hummus",
        "documentation": {}
    },
    {
        "label": "KnownGenes",
        "kind": 5,
        "importPath": "build.lib.t_map.hummus.hummus",
        "description": "build.lib.t_map.hummus.hummus",
        "peekOfCode": "KnownGenes = List[Gene]\nHeldoutGenes = List[Gene]\nclass Hummus:\n    def __init__(self, data: Garbanzo,\n                 with_scoring: Optional[HummusScore] = None,\n                 train_test_split_ratio: Optional[float] = None):\n        self.data = data\n        self._genes = [self.data.get(i) for i in range(len(data))]\n        self._score_module = with_scoring\n        self._with_cv = False",
        "detail": "build.lib.t_map.hummus.hummus",
        "documentation": {}
    },
    {
        "label": "HeldoutGenes",
        "kind": 5,
        "importPath": "build.lib.t_map.hummus.hummus",
        "description": "build.lib.t_map.hummus.hummus",
        "peekOfCode": "HeldoutGenes = List[Gene]\nclass Hummus:\n    def __init__(self, data: Garbanzo,\n                 with_scoring: Optional[HummusScore] = None,\n                 train_test_split_ratio: Optional[float] = None):\n        self.data = data\n        self._genes = [self.data.get(i) for i in range(len(data))]\n        self._score_module = with_scoring\n        self._with_cv = False\n        self._train_test_split_ratio = train_test_split_ratio",
        "detail": "build.lib.t_map.hummus.hummus",
        "documentation": {}
    },
    {
        "label": "HummusScore",
        "kind": 6,
        "importPath": "build.lib.t_map.hummus.hummus_score",
        "description": "build.lib.t_map.hummus.hummus_score",
        "peekOfCode": "class HummusScore:\n    \"\"\"Hummus Score is a module used for scoring a particular\n    prioritization algorithm. Its main purpose is to be passed\n    into an instance of Hummus to the `with_scoring` parameter.\n    If provided during testing and training time, the Hummus\n    module with additionally return a score function, which will\n    accept a list of prediction with or without a score.\n    Note: Hummus Score function returns None. It is the responsibility\n    of Hummus Score to later provide results.\n    \"\"\"",
        "detail": "build.lib.t_map.hummus.hummus_score",
        "documentation": {}
    },
    {
        "label": "ScoreFn",
        "kind": 5,
        "importPath": "build.lib.t_map.hummus.hummus_score",
        "description": "build.lib.t_map.hummus.hummus_score",
        "peekOfCode": "ScoreFn = Callable[[Union[List[Gene], List[Tuple[Gene, float]]]], None]\nclass HummusScore:\n    \"\"\"Hummus Score is a module used for scoring a particular\n    prioritization algorithm. Its main purpose is to be passed\n    into an instance of Hummus to the `with_scoring` parameter.\n    If provided during testing and training time, the Hummus\n    module with additionally return a score function, which will\n    accept a list of prediction with or without a score.\n    Note: Hummus Score function returns None. It is the responsibility\n    of Hummus Score to later provide results.",
        "detail": "build.lib.t_map.hummus.hummus_score",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\nsource_suffix = '.rst'\n# The master toctree document.\nmaster_doc = 'index'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "templates_path = ['_templates']\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\nsource_suffix = '.rst'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = 't-map'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "source_suffix = '.rst'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = 't-map'\ncopyright = \"2021, Mert Erden\"\nauthor = \"Mert Erden\"\n# The version info for the project you're documenting, acts as replacement\n# for |version| and |release|, also used in various other places throughout\n# the built documents.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "master_doc = 'index'\n# General information about the project.\nproject = 't-map'\ncopyright = \"2021, Mert Erden\"\nauthor = \"Mert Erden\"\n# The version info for the project you're documenting, acts as replacement\n# for |version| and |release|, also used in various other places throughout\n# the built documents.\n#\n# The short X.Y version.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "project = 't-map'\ncopyright = \"2021, Mert Erden\"\nauthor = \"Mert Erden\"\n# The version info for the project you're documenting, acts as replacement\n# for |version| and |release|, also used in various other places throughout\n# the built documents.\n#\n# The short X.Y version.\nversion = t_map.__version__\n# The full version, including alpha/beta/rc tags.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "copyright = \"2021, Mert Erden\"\nauthor = \"Mert Erden\"\n# The version info for the project you're documenting, acts as replacement\n# for |version| and |release|, also used in various other places throughout\n# the built documents.\n#\n# The short X.Y version.\nversion = t_map.__version__\n# The full version, including alpha/beta/rc tags.\nrelease = t_map.__version__",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "author = \"Mert Erden\"\n# The version info for the project you're documenting, acts as replacement\n# for |version| and |release|, also used in various other places throughout\n# the built documents.\n#\n# The short X.Y version.\nversion = t_map.__version__\n# The full version, including alpha/beta/rc tags.\nrelease = t_map.__version__\n# The language for content autogenerated by Sphinx. Refer to documentation",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "version = t_map.__version__\n# The full version, including alpha/beta/rc tags.\nrelease = t_map.__version__\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n# List of patterns, relative to source directory, that match files and",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "release = t_map.__version__\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This patterns also effect to html_static_path and html_extra_path",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "language",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "language = None\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This patterns also effect to html_static_path and html_extra_path\nexclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = False\n# -- Options for HTML output -------------------------------------------",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = False\n# -- Options for HTML output -------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = 'alabaster'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "pygments_style = 'sphinx'\n# If true, `todo` and `todoList` produce output, else they produce nothing.\ntodo_include_todos = False\n# -- Options for HTML output -------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = 'alabaster'\n# Theme options are theme-specific and customize the look and feel of a\n# theme further.  For a list of options available for each theme, see the",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "todo_include_todos",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "todo_include_todos = False\n# -- Options for HTML output -------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = 'alabaster'\n# Theme options are theme-specific and customize the look and feel of a\n# theme further.  For a list of options available for each theme, see the\n# documentation.\n#",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "html_theme = 'alabaster'\n# Theme options are theme-specific and customize the look and feel of a\n# theme further.  For a list of options available for each theme, see the\n# documentation.\n#\n# html_theme_options = {}\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "html_static_path = ['_static']\n# -- Options for HTMLHelp output ---------------------------------------\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 't_mapdoc'\n# -- Options for LaTeX output ------------------------------------------\nlatex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "htmlhelp_basename = 't_mapdoc'\n# -- Options for LaTeX output ------------------------------------------\nlatex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n    # Additional stuff for the LaTeX preamble.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "latex_elements",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "latex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n    # Additional stuff for the LaTeX preamble.\n    #\n    # 'preamble': '',",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "latex_documents = [\n    (master_doc, 't_map.tex',\n     't-map Documentation',\n     'Mert Erden', 'manual'),\n]\n# -- Options for manual page output ------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (master_doc, 't_map',",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "man_pages",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "man_pages = [\n    (master_doc, 't_map',\n     't-map Documentation',\n     [author], 1)\n]\n# -- Options for Texinfo output ----------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "texinfo_documents",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "texinfo_documents = [\n    (master_doc, 't_map',\n     't-map Documentation',\n     author,\n     't_map',\n     'One line description of project.',\n     'Miscellaneous'),\n]",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "Description",
        "kind": 6,
        "importPath": "t_map.feta.description",
        "description": "t_map.feta.description",
        "peekOfCode": "class Description:\n    requires_training: bool\n    training_opts: Any  # Hummus should know about TrainingOptions\n    hyper_params: Dict[str, Any]",
        "detail": "t_map.feta.description",
        "documentation": {}
    },
    {
        "label": "Feta",
        "kind": 6,
        "importPath": "t_map.feta.feta",
        "description": "t_map.feta.feta",
        "peekOfCode": "class Feta(ABC):\n    @abstractproperty\n    def description(self) -> Description:\n        ...\n    @abstractmethod\n    def prioritize(self, disease_gene: List[Gene],\n                   graph: Union[nx.Graph, None]) -> Set[Tuple[Gene, float]]:\n        # In theory a model need not store the Graph and thus should rely on the Data library to pass it.\n        ...\n    def __call__(self, disease_gene: Union[Gene, List[Gene]],",
        "detail": "t_map.feta.feta",
        "documentation": {}
    },
    {
        "label": "PreComputeFeta",
        "kind": 6,
        "importPath": "t_map.feta.feta",
        "description": "t_map.feta.feta",
        "peekOfCode": "class PreComputeFeta(Feta):\n    @abstractmethod\n    def setup(self, graph: nx.Graph, *args, **kwargs):\n        ...",
        "detail": "t_map.feta.feta",
        "documentation": {}
    },
    {
        "label": "RandomWalkWithRestart",
        "kind": 6,
        "importPath": "t_map.feta.randomwalk",
        "description": "t_map.feta.randomwalk",
        "peekOfCode": "class RandomWalkWithRestart(Feta):\n    def __init__(self, alpha=0.85):\n        self._desc = Description(\n            requires_training=False,\n            training_opts=None,\n            hyper_params={\"alpha\": alpha})\n    def description(self) -> Description:\n        return self.__desc\n    def prioritize(self, disease_gene: List[Gene],\n                   graph: Union[nx.Graph, None]) -> Set[Tuple[Gene, float]]:",
        "detail": "t_map.feta.randomwalk",
        "documentation": {}
    },
    {
        "label": "PreComputeRWR",
        "kind": 6,
        "importPath": "t_map.feta.randomwalk",
        "description": "t_map.feta.randomwalk",
        "peekOfCode": "class PreComputeRWR(PreComputeFeta):\n    def __init__(self, alpha=0.85):\n        self.__desc = Description(\n            requires_training=False,\n            training_opts=None,\n            hyper_params={\"alpha\": alpha})\n    def description(self) -> Description:\n        return self.__desc\n    def prioritize(self, disease_gene: List[Gene],\n                   graph: Union[nx.Graph, None]) -> Set[Tuple[Gene, float]]:",
        "detail": "t_map.feta.randomwalk",
        "documentation": {}
    },
    {
        "label": "EdgeListGarbanzo",
        "kind": 6,
        "importPath": "t_map.garbanzo.edgelist",
        "description": "t_map.garbanzo.edgelist",
        "peekOfCode": "class EdgeListGarbanzo(Garbanzo):\n    def __init__(self, graph_path: str, gene_path: str):\n        self._graph_path = graph_path\n        self._gene_path = gene_path\n        self._graph = self._read_graph_from_path(graph_path)\n        self._genes = self._read_genes_from_path(gene_path)\n    @property\n    def graph(self) -> nx.Graph:\n        return self._graph\n    @property",
        "detail": "t_map.garbanzo.edgelist",
        "documentation": {}
    },
    {
        "label": "Garbanzo",
        "kind": 6,
        "importPath": "t_map.garbanzo.garbanzo",
        "description": "t_map.garbanzo.garbanzo",
        "peekOfCode": "class Garbanzo(ABC):\n    @abstractproperty\n    def graph(self) -> nx.Graph:\n        ...\n    @abstractproperty\n    def graph_path(self) -> str:\n        ...\n    @abstractproperty\n    def gene_path(self) -> str:\n        ...",
        "detail": "t_map.garbanzo.garbanzo",
        "documentation": {}
    },
    {
        "label": "Huri",
        "kind": 6,
        "importPath": "t_map.garbanzo.huri",
        "description": "t_map.garbanzo.huri",
        "peekOfCode": "class Huri(EdgeListGarbanzo):\n    HURI_URL = \"https://bcb.cs.tufts.edu/huri/huri.tsv\"\n    def __init__(self, gene_path: str, download_path: str = \"/tmp/\"):\n        self._gene_path = gene_path\n        self._graph_pathlib: pathlib.Path = pathlib.Path(\n            download_path) / \"huri\"\n        self._graph = self._download_and_parse_graph()\n        self._genes = self._read_genes_from_path(gene_path)\n    @property\n    def graph_path(self) -> str:",
        "detail": "t_map.garbanzo.huri",
        "documentation": {}
    },
    {
        "label": "Gene",
        "kind": 6,
        "importPath": "t_map.gene.gene",
        "description": "t_map.gene.gene",
        "peekOfCode": "class Gene:\n    name: str\n    labels: Union[List[str], None] = None",
        "detail": "t_map.gene.gene",
        "documentation": {}
    },
    {
        "label": "Hummus",
        "kind": 6,
        "importPath": "t_map.hummus.hummus",
        "description": "t_map.hummus.hummus",
        "peekOfCode": "class Hummus:\n    def __init__(self, data: Garbanzo,\n                 with_scoring: Optional[HummusScore] = None,\n                 train_test_split_ratio: Optional[float] = None):\n        self.data = data\n        self._genes = [self.data.get(i) for i in range(len(data))]\n        self._score_module = with_scoring\n        self._with_cv = False\n        self._train_test_split_ratio = train_test_split_ratio\n    def with_cv(self, k_fold: Union[int, Literal[\"LOO\"]] = 5) -> Hummus:",
        "detail": "t_map.hummus.hummus",
        "documentation": {}
    },
    {
        "label": "HummusTester",
        "kind": 6,
        "importPath": "t_map.hummus.hummus",
        "description": "t_map.hummus.hummus",
        "peekOfCode": "class HummusTester(ContextManager):\n    def __init__(self, data: Garbanzo, test_idx: List[int],\n                 with_scoring: Union[None,\n                                     HummusScore] = None):\n        self._data: Garbanzo = data\n        self._test: List[int] = test_idx\n        self._i = 0\n        self._heldout_genes = self._collect_heldout_genes()\n        self._with_scoring = with_scoring\n        if self._with_scoring is not None:",
        "detail": "t_map.hummus.hummus",
        "documentation": {}
    },
    {
        "label": "HummusTrainer",
        "kind": 6,
        "importPath": "t_map.hummus.hummus",
        "description": "t_map.hummus.hummus",
        "peekOfCode": "class HummusTrainer(ContextManager):\n    \"\"\"\n        Ideally I expect this to be a training class, but\n        after much thought I am a bit puzzled as to how to\n        best structure this.\n    \"\"\"\n    def __init__(self, data: Garbanzo, train_idx: List[int],\n                 with_scoring: Union[None,\n                                     HummusScore] = None):\n        self._data: Garbanzo = data",
        "detail": "t_map.hummus.hummus",
        "documentation": {}
    },
    {
        "label": "KnownGenes",
        "kind": 5,
        "importPath": "t_map.hummus.hummus",
        "description": "t_map.hummus.hummus",
        "peekOfCode": "KnownGenes = List[Gene]\nHeldoutGenes = List[Gene]\nclass Hummus:\n    def __init__(self, data: Garbanzo,\n                 with_scoring: Optional[HummusScore] = None,\n                 train_test_split_ratio: Optional[float] = None):\n        self.data = data\n        self._genes = [self.data.get(i) for i in range(len(data))]\n        self._score_module = with_scoring\n        self._with_cv = False",
        "detail": "t_map.hummus.hummus",
        "documentation": {}
    },
    {
        "label": "HeldoutGenes",
        "kind": 5,
        "importPath": "t_map.hummus.hummus",
        "description": "t_map.hummus.hummus",
        "peekOfCode": "HeldoutGenes = List[Gene]\nclass Hummus:\n    def __init__(self, data: Garbanzo,\n                 with_scoring: Optional[HummusScore] = None,\n                 train_test_split_ratio: Optional[float] = None):\n        self.data = data\n        self._genes = [self.data.get(i) for i in range(len(data))]\n        self._score_module = with_scoring\n        self._with_cv = False\n        self._train_test_split_ratio = train_test_split_ratio",
        "detail": "t_map.hummus.hummus",
        "documentation": {}
    },
    {
        "label": "HummusScore",
        "kind": 6,
        "importPath": "t_map.hummus.hummus_score",
        "description": "t_map.hummus.hummus_score",
        "peekOfCode": "class HummusScore:\n    \"\"\"Hummus Score is a module used for scoring a particular\n    prioritization algorithm. Its main purpose is to be passed\n    into an instance of Hummus to the `with_scoring` parameter.\n    If provided during testing and training time, the Hummus\n    module with additionally return a score function, which will\n    accept a list of prediction with or without a score.\n    Note: Hummus Score function returns None. It is the responsibility\n    of Hummus Score to later provide results.\n    \"\"\"",
        "detail": "t_map.hummus.hummus_score",
        "documentation": {}
    },
    {
        "label": "ScoreFn",
        "kind": 5,
        "importPath": "t_map.hummus.hummus_score",
        "description": "t_map.hummus.hummus_score",
        "peekOfCode": "ScoreFn = Callable[[Union[List[Gene], List[Tuple[Gene, float]]]], None]\nclass HummusScore:\n    \"\"\"Hummus Score is a module used for scoring a particular\n    prioritization algorithm. Its main purpose is to be passed\n    into an instance of Hummus to the `with_scoring` parameter.\n    If provided during testing and training time, the Hummus\n    module with additionally return a score function, which will\n    accept a list of prediction with or without a score.\n    Note: Hummus Score function returns None. It is the responsibility\n    of Hummus Score to later provide results.",
        "detail": "t_map.hummus.hummus_score",
        "documentation": {}
    },
    {
        "label": "test_rwr",
        "kind": 2,
        "importPath": "tests.test_feta",
        "description": "tests.test_feta",
        "peekOfCode": "def test_rwr():\n    data = EdgeListGarbanzo(\n        graph_path=\"./tests/data/unweighted_edge.list\",\n        gene_path=\"./tests/data/gene.list\")\n    model = RandomWalkWithRestart()\n    model(data.get(0), data.graph)\n    model_data = model([data.get(0), data.get(1)], data.graph)\n    precompute = PreComputeRWR()\n    precompute(data.get(0), data.graph)\n    precomp_data = precompute([data.get(0), data.get(3)], data.graph)",
        "detail": "tests.test_feta",
        "documentation": {}
    },
    {
        "label": "test_edgelist",
        "kind": 2,
        "importPath": "tests.test_garbanzo",
        "description": "tests.test_garbanzo",
        "peekOfCode": "def test_edgelist():\n    # testing for side effect\n    EdgeListGarbanzo(\n        graph_path=\"./tests/data/unweighted_edge.list\",\n        gene_path=\"./tests/data/gene.list\")\ndef test_huri():\n    data = Huri(\"./tests/data/gene.list\")\n    # maybe not the best test as only works for posix\n    assert(data.graph_path == \"/tmp/huri/huri.tsv\")\n    assert data.get(0)",
        "detail": "tests.test_garbanzo",
        "documentation": {}
    },
    {
        "label": "test_huri",
        "kind": 2,
        "importPath": "tests.test_garbanzo",
        "description": "tests.test_garbanzo",
        "peekOfCode": "def test_huri():\n    data = Huri(\"./tests/data/gene.list\")\n    # maybe not the best test as only works for posix\n    assert(data.graph_path == \"/tmp/huri/huri.tsv\")\n    assert data.get(0)\n    assert data.graph",
        "detail": "tests.test_garbanzo",
        "documentation": {}
    },
    {
        "label": "test_cv",
        "kind": 2,
        "importPath": "tests.test_hummus",
        "description": "tests.test_hummus",
        "peekOfCode": "def test_cv():\n    data = EdgeListGarbanzo(\n        graph_path=\"./tests/data/unweighted_edge.list\",\n        gene_path=\"./tests/data/gene.list\")\n    score_module = HummusScore()\n    runner = Hummus(data, with_scoring=score_module)\n    # Check if we assert gracefully in cv is not set\n    try:\n        for tester in runner:\n            ...",
        "detail": "tests.test_hummus",
        "documentation": {}
    },
    {
        "label": "requirements",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "requirements = ['networkx', 'sklearn']\ntest_requirements = ['pytest>=3', ]\nsetup(\n    author=\"Mert Erden\",\n    author_email='mert.erden@tufts.edu',\n    python_requires='>=3.6',\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "test_requirements",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "test_requirements = ['pytest>=3', ]\nsetup(\n    author=\"Mert Erden\",\n    author_email='mert.erden@tufts.edu',\n    python_requires='>=3.6',\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Natural Language :: English',",
        "detail": "setup",
        "documentation": {}
    }
]